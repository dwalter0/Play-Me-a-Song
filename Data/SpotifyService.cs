using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Options;
using Newtonsoft.Json;
using SpotifyAPI.Web;
using SpotifyAPI.Web.Enums;
using SpotifyAPI.Web.Models;
using System.Configuration;

namespace Blazor_Scratch.Data
{
    public class SpotifyService
    {

        private readonly IOptions<Config> config;

        public SpotifyService(IOptions<Config> config)
        {
            this.config = config;
        }


        string _accessToken;
        SpotifyWebAPI _api;

        private void GetAPIReady()
        {
            if (_accessToken is null)
            {
                _accessToken = GenerateToken();
            }
            if (_api is null)
            {
                _api = new SpotifyWebAPI
                {
                    AccessToken = _accessToken,
                    TokenType = ""
                };
            }

            //there should be a better way to check if the connection is up than checking an error on the currently playing song
            var result = Task.FromResult(_api.GetPlayingTrackAsync().Result);
            //if there's an error regenerate the token and try loading the api again. Long sessions cause the token to expire.
            if (result.Result.HasError())
            {
                RefreshAPI();
            }


        }

        private void RefreshAPI()
        {
            _accessToken = GenerateToken();
            _api = new SpotifyWebAPI
            {
                AccessToken = _accessToken,
                TokenType = ""
            };
        }

        public Task<PlaybackContext> GetCurrentlyPlaying()
        {
            GetAPIReady();
            try
            {
                return Task.FromResult(_api.GetPlayingTrackAsync().Result);
            }
            catch
            {
                return null;
            }
        }

        public Task<AvailabeDevices> GetDevices()
        {
            GetAPIReady();
            try
            {
                return Task.FromResult(_api.GetDevicesAsync().Result);
            }
            catch
            {
                return null;
            }
        }

        private string GetCurrentDeviceID()
        {
            var ret = from u in GetDevices().Result.Devices
                      where u.IsActive = true
                      select u;
            return ret.FirstOrDefault().Id;

        }

        public Paging<FullTrack> SearchTracks(string searchString)
        {
            GetAPIReady();
            var searchResult = _api.SearchItems(searchString, SearchType.Track);
            return searchResult.Tracks;
        }

        public void PlayTrack(string trackURI)
        {
            GetAPIReady();
            _api.PausePlayback();
            _api.ResumePlaybackAsync(default,default,new List<string> {trackURI },"",default);
        }

        public void AddTrackToPlaylist(string trackURI)
        {
            RefreshAPI();
            var userID = _api.GetPrivateProfile().Id;
            var playlists = _api.GetUserPlaylists(userID);
            var TuneMePlaylist = playlists.Items.FirstOrDefault(s => s.Name == "TuneMe");
            var playlistID = "";
            if(!(TuneMePlaylist is null))
            {
                playlistID = TuneMePlaylist.Id;
            }
            else
            {
                var newPlaylist = _api.CreatePlaylist(userID, "TuneMe", true, false, "TuneMe Playlist, generated by requests on TuneMe");
                playlistID = newPlaylist.Id;
            }

            var addResult = _api.AddPlaylistTrack(playlistID, trackURI);
            Console.WriteLine("test");
        }

 


        private string GenerateToken()
        {
            string token = "";
            string refreshToken = config.Value.RefreshToken;
            string clientID = config.Value.ClientID;
            string clientSecret = System.Web.HttpUtility.UrlEncode(config.Value.ClientSecret);
            string body = "grant_type=refresh_token&refresh_token=" + refreshToken + "&client_id=" + clientID + "&client_secret=" + clientSecret;

            HttpWebRequest request = (HttpWebRequest)HttpWebRequest.Create("https://accounts.spotify.com/api/token");

            request.Method = "POST";
            request.ContentType = "application/x-www-form-urlencoded";
            System.Text.UTF8Encoding encoding = new System.Text.UTF8Encoding();
            byte[] bytes = encoding.GetBytes(body);
            request.ContentLength = bytes.Length;
            using (Stream requestStream = request.GetRequestStream())
            {
                // Send the data.
                requestStream.Write(bytes, 0, bytes.Length);
            }

            var response = request.GetResponse();

            using (Stream responseStream = response.GetResponseStream())
            {
                using (StreamReader reader = new StreamReader(responseStream))
                {
                    string responseFromServer = reader.ReadToEnd();
                    var destoken = JsonConvert.DeserializeObject<Dictionary<string, string>>(responseFromServer);
                    token = destoken["token_type"] + " " + destoken["access_token"];
                }
            }

            return token;
        }

    }



}
