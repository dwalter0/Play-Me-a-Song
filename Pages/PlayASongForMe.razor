@page "/"

@using Blazor_Scratch.Data
@using System.Threading
@inject SpotifyService SpotifyService

<h1>Play me a Song</h1>

@*@if (currentlyPlaying == null || currentlyPlaying.Item == null)
    {
        <p><em>Offline...</em></p>

    }
    else
    {*@


<head>
    <meta property="og:image" content="images/pic.jpg" />
    <meta property="og:type" content="website" />
    <meta property="og:title" content="Play a Song" />
    <meta property="og:description" content="The music goes in my earholes" />
</head>

@if (currentlyPlaying.IsPlaying)
{
    <p><img src="images/pic.jpg" height="10" width="10" />Currently Listening</p>

}
else
{
    <p>Not listening just this second. Songs you play will be added to a playlist.</p>
}
<div style="background-color: black">
    @if (currentlyPlaying.IsPlaying)
    {

        <div style="background-color: black">
            <p class="centerwhite"><strong>Now Playing: @currentlyPlaying.Item.Name - @currentlyPlaying.Item.Artists[0].Name</strong></p>
            <br />
            <br />
            <img style="border:5px solid black" src="@currentlyPlaying.Item.Album.Images[0].Url" width="250" class="center" />
            <br />
            <p>
                <EditForm Model="@searchModel" OnValidSubmit="Search">
                    <InputText class="center" id="search" @bind-Value="searchModel.search"></InputText>
                    <button class="center" type="submit">find a song to play</button>
                </EditForm>
            </p>
            <br />
            <br />
        </div>
    }
    else
    {
        <p>
            <EditForm Model="@searchModel" OnValidSubmit="Search">
                <InputText class="center" id="search" @bind-Value="searchModel.search"></InputText>
                <button class="center" type="submit">find a song to play</button>
            </EditForm>
        </p>
    }
</div>
<div style="background-color: whitesmoke">
    @if (searchedTracks != null && searchedTracks.Items.Count > 0)
    {
        <table class="table table-striped table-dark">
            <tr>
                <th>

                </th>
                <th>

                </th>

                <th>
                </th>
                <th></th>
            </tr>

            @foreach (var item in searchedTracks.Items)
            {
                <tr>
                    <td>
                        <button @onclick="@(() => Play(item.Uri))" class="bg-transparent btn-link shadow-none" style="border:none"><img src="images/play-button.png" height="30" /></button>
                    </td>
                    <td>
                        <img src="@item.Album.Images[0].Url" height="50" width="50" />
                    </td>
                    <td>
                        <div style="font-size:12px;">@item.Name</div>
                        <div style="font-size:8px;">@item.Artists[0].Name</div>
                        <div style="font-size:8px;">@item.Album.Name</div>
                    </td>

                    <td>

                        <button @onclick="@(() => AddToPlaylist(item.Uri))" class="btn-link shadow-none" style="border:none; color:grey; Background:black">Add to playlist</button>
                    </td>
                </tr>
            }

        </table>



    }
</div>




@code {
    // private PlayModel playModel = new PlayModel();
    private void Play(string TrackURI)
    {
        SpotifyService.AddTrackToPlaylist(TrackURI);
        SpotifyService.PlayTrack(TrackURI);
        searchedTracks = null;
        searchModel.search = "";
    }

    private void AddToPlaylist(string TrackURI)
    {
        SpotifyService.AddTrackToPlaylist(TrackURI);
        searchedTracks = null;
        searchModel.search = "";
    }

    private SearchModel searchModel = new SearchModel();
    private SpotifyAPI.Web.Models.Paging<SpotifyAPI.Web.Models.FullTrack> searchedTracks;
    private void Search()
    {
        searchedTracks = SpotifyService.SearchTracks(searchModel.search);
    }

    private SpotifyAPI.Web.Models.PlaybackContext currentlyPlaying;
    private SpotifyAPI.Web.Models.AvailabeDevices devices;
    private string GetCurrentlyPlayingDevice()
    {
        return (from u in devices.Devices
                where u.IsActive = true
                select u).FirstOrDefault().Name;
    }

    //render code
    protected override async Task OnInitializedAsync()
    {
        currentlyPlaying = await SpotifyService.GetCurrentlyPlaying();
        devices = await SpotifyService.GetDevices();
        StartCountdown();
    }
    //rerender code
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        currentlyPlaying = await SpotifyService.GetCurrentlyPlaying();
        devices = await SpotifyService.GetDevices();
    }

    //Timed render code
    private void StartCountdown()
    {
        var Timer = new Timer(DoWork, null, TimeSpan.Zero, TimeSpan.FromSeconds(2));
    }
    private void DoWork(object state)
    {
        base.InvokeAsync(StateHasChanged);
    }


}
